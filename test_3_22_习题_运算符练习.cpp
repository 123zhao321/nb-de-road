#define _CRT_SECURE_NO_WARNINGS 1

// 第1题(单选题)
// 题目名称:
// 下面代码的结果是:()
// #include<stdio.h>
//int main()
//{
//	int a, b, c;
//	a = 5.
//	c = ++a;
//	b = ++c, c++, ++a, a++;
//	b += a++ + c;// 先使用再++
//	printf("a = %d b = %d c = %d\n:",a, b, c);
//	return 0.
//}
// 题目内容
// A.a = 8 b = 23 c = 8
// B.a = 9 b = 23 c = 8
// C.a = 9 b = 25 c = 8
// D.a = 9 b = 24 c = 8
// 
// a=5;a=6;c=a=6;c=6;
// c=7;c=8;a=7;b=7;a=8;
// b=23;a=9;c=8
// 
// 
// 
// 第5题(编程题)
// 题目名称:
// 统计二进制中1的个数题目内容
// 写一个函数返回参数二进制中1的个数。
// 比如 : 15 00001111 4个1
//
//#include<stdio.h>
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int count = 0;
//	while (n) // 只有n=0时，循环终止
//	{
//		n = n & (n - 1); // 每次都可以去掉最后一个1
//		count++;
//	}
//	printf("%d", count);
//	return 0;
//}
// 
// 因为当一个二进制数 n 减去 1 时，会将其最右边的1变为0，
// 同时将其右边的所有0都变为1。
// 所以当n和n - 1做与运算时，最右边的1会被消除掉，
// 因为n与n - 1中最右边一位肯定是相反的。
// 因此，每次运算后n的1的位数都会减少一个，直到n变为0。
// 
// 与运算（&）的规则是将两个数的二进制表示进行比较，
// 如果对应位置上的两个数都为1，则结果为1，否则为0。例如：
// 0 & 0 = 0
// 0 & 1 = 0
// 1 & 0 = 0
// 1 & 1 = 1
// 所以当对一个数n与(n - 1)进行与运算时，
// 会将n的二进制表示中最右边的1变为0。
//
// 
// 
// 第3题(编程题)
// 题目名称:求两个数二进制中不同位的个数
// 题目内容 :
// 编程实现:两个int(32位)整数m和n的二进制表达中，有多少个位(bit)不同?
// 输入例子 :
// 1999 2299
// 输出例子 : 7
//
//#include<stdio.h>
//int main()
//{
//	int n, m;
//	scanf("%d %d", &n, &m);
//	int c;
//	c = m ^ n;
//	int count = 0;
//	while (c)
//	{
//		c = c & (c - 1);
//		count++;
//	}
//	printf("%d", count);
//	return 0;
//}
// 
// 异或运算符（^）对应的运算规则是：
// 如果两个操作数的位相同，则结果为0；
// 如果两个操作数的位不同，则结果为1。
// 例如：
// 0 ^ 0 = 0
// 0 ^ 1 = 1
// 1 ^ 0 = 1
// 1 ^ 1 = 0
// 异或运算经常用于交换两个变量的值、将某个特定位的值置反等操作。
//
// 
// 
// 第4题(编程题)
// 题目名称:
// 打印整数二进制的奇数位和偶数位
// 题目内容 :
// 获取一个整数二进制序列中所有的偶数位和奇数位，
// 分别打印出二进制序列

//#include <stdio.h>
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int i = 0;
//	int c = n;
//	// 奇数位
//	for (i = 8; i >= 0; i --)
//	{
//		printf("%d ", (c >> 2 * i) & 1);
//	}
//	printf("\n");
//	// 偶数位
//	c = n >> 1;
//	for (i = 8; i >= 0; i --)
//	{
//		printf("%d ", (c >> 2 * i) & 1);
//	}
//	return 0;
//}
//
// 左移( << )与右移( >> )操作符都是针对二进制数的
//
// 第6题(编程题)
// 题目名称:交换两个变量(不创建临时变量)
// 题目内容 : 不允许创建临时变量，交换两个整数的内容

//#include <stdio.h>
//int main()
//{
//	int a = 5; // a = 101
//	int b = 3; // b = 011
//
//	a = a ^ b; // a = 110 6
//			   // b = 011 3
//
//	b = b ^ a; // a = 110 6
//			   // b = 101 5
//
//	a = a ^ b; // a = 011 3
//			   // b = 101 5
//	printf("a=%d b=%d", a, b);
//	return 0;
//}

// 异或使用
// 第一次a^b的时候储存在a中，此时a是一个中间态，a啥也不是（哈哈）
// 当b再异或a，b就是原来a的值
// 此时，b=a，a是中间态，a啥也不是（哈哈）
// 然后，a再异或b，中间态异或b（就是原来的a），a得到原来b的值
// 
// 
// 
// 第1题(单选题)
// 题目名称:
// 下面代码的结果是:
 /*#include<stdio.h>
int main()
{
	int i = 1; 
	int ret = (++i) + (++i) + (++i);
	printf("ret = %d\n",ret);
	return 0;
}*/
// 题目内容:
// A.10
// B.12
// C.9
// D.程序错误

// 答案是D
// 因为当编译器不同时，编译的结果不一样，
// 如果非要说答案，上面abc都是正确的
// 操作系统不同，编译器选择不同，都会导致结果不同
// 是一种垃圾代码
// 
//指针的概念(都是对的)
//A.指针是变量，用来存放地址
//B.指针变量中存的有效地址可以唯一指向内存中的一块区域
//C.野指针不可以正常使用
//D.局部指针变量不初始化就是野指针
// 
// 
// 大小（以字节为单位）但通常情况下：
// short整型通常是2个字节
// int整型通常是4个字节
// long整型通常是4个字节或8个字节（取决于系统）
// 需要注意的是，这是一般情况的规定，在某些特定的系统上可能会有所不同。
//