#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

// 允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较
// 但是不允许与指向第一个元素之前的那个内存位置的指针进行比较
// 对指针进行操作时，尤其是访问数组的时候
// 语法规定上可以与数组之后的空间创建指针并比较
// 就是一个指针从数组首元素开始访问，有时候指针先++再判断
// 最后的时候指针会超过数组本身，规定上是允许的
//
//  但是如果是指针从最后开始向前--，若比数组靠前就不允许了

//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	printf("%p\n", arr);
//	printf("%p\n", &arr[0]);
//	// arr是数组首元素的地址，所以地址可以交给地址
//	int* p = arr;
//	// 打印数组第三个元素的方式
//	printf("%d\n", arr[2]);
//	printf("%d\n", p[2]);
//
//	printf("%d\n", *(p + 2));
//	printf("%d\n", *(arr + 2));
//
//	printf("%d\n", 2[p]);
//	printf("%d\n", 2[arr]);
//
//	// arr[2] == p[2] == *p+2 == *arr+2
//	// 2[p]   --> *(p+2)
//	// 2[arr] --> *(arr+2)
//	return 0;
//}

// 二级指针
int main()
{
	// 普通整型变量
	int a = 5;
	printf("%d\n", a);


	// 一级指针 -- 里面是一个普通类型的地址
	int* pa = &a; // 将普通整型变量的地址给一级指针
	printf("%d\n", *pa); // '*'是解引用操作符
			// 大概意思就是，*后面的是个地址，*来按照地址找文件去


	// 二级指针 -- 是一级指针的地址
	int** ppa = &pa; // 二级指针的第一个*是说明是一个指针类型
					 // 第二个*是对一级指针解引用
	printf("%d\n", **ppa);
	// 二级指针 *--> 一级指针 *--> 整型

	// 指针数组 -- 了解 -- 存放指针的数组
	int* parr[5];
	// 字符数组 --了解
	char* pch[5];
	return 0;
}